********************
Life Expectancy App
********************

This is a simple Life Expectancy app that uses the World Population APIs ( WPA ) found at http://api.population.io/ to calculate the life expectancy of a user.
The program needs the following information to provide a user's life expectancy:

Name: *user*
Country: *country*
Date of Birth: *dob*
Gender: *male*

*user*'s life expectancy is: *years* years, *months* months, *weeks* weeks, *days* days

Below is a description of the major components in the app


1. LifeExpectancy.py

LifeExpectancy works as the frontend of the app.

The main method is lifeExpectancy() which handles the flow of the app. Before a while True: loop that allows the user to make multiple life expectancy requests, the app initializes the cache ( see LECache.py ) and the data storage ( see LEBackEnd.py ) as well as caching the list of valid countries from WPA.

The workflow for each request is the following:

- get user input through lifeExpectancyInput(), if the input is incorrect an error message is delivered to the user who is also prompted to exit

- check validity of the country by looking at the cached list of countries. This is done to avoid querying the WPA if the country is invalid.

- check cache to see if an identical life expectancy has been queried recently ( i.e. within the last 10 requests ). If so the life expectancy is returned

- check the backend ( i.e. data storage ) to see if an identical life expectancy has been already queried. If so, the life expectancy is returned

- finally, if the life expectancy hasnt been queried before, query the WPA and calculate the life expectancy.


2. LEBackEnd.py

LEBackEnd contains the implementation of the data storage mechanism, the "backend". The constraint is that disk access is expensive ( but I have assumed disk consumption isn't ) and as such I generate a complex hierarchy of directories to store small life expectancies. For each life expectancy, three pieces of information make up the path to its file: date, dob, country.

The life expectancy path is: rootdir/date.year/date.month/date.day/country/dob.year/dob.month/dob.day/. In this directory 2 files ( one per gender ) can be stored. The files contain a dateutil.relativedelta.relativedelta object in JSON format. To figure out why such a complex mechanism is used for storing queries, see the Notes section.

This backend mechanism keeps the file size very small and, more importantly, allows to query for a certain life expectancy without doing any disk accesses if the life expectancy isnt present. If present, the disk access loads a very small file which should be less expensive than opening larger files.


There are 2 methods to interact with the data store:
- fetchLifeExpectancy: returns a dateutil.relativedelta.relativedelta object if the life expectancy exists, None otherwise
- addLifeExpectancy: creates the life expectancy path described above if it doesnt exist and then adds a file based on the gender which contains the life expectancy information.

3. LECache.py

LECache contains the implementation of a LRU cache for life expectancies. The cache is implemented simply with a list that contains the last 10 LifeExpectancy objects.

There are 2 methods to interact with the cache:
- put: takes a LifeExpectancy object. If the object is in the cache, it removes it from the cache and then adds it to the front of the list to signify that it's the latest object retrived. When the size of the cache exceeds maxsize, the element at the end of the list ( used the furthest time back ) is removed.
- get: returns a LifeExpectancy if an identical object is in the cache. If so, put( object ) is also called to signify that it has become the most recently used object.


Note that this implementation is not very efficient. The get function linearly scans the entire list ( could be improved with a hash ) while the put function removes an element from a list ( in python it probably creates 2 sub lists which then get stiched back together ) and inserts it at the front of the list ( another complex operation in python ). Both operations could be improved by implementing the cache through a linked list.



4. LEUtils.py

LEUtils has the LifeExpectancy class which is the abstraction used to represent life expectancies.


Notes:

- Why is such a complex mechanism used to store life expectancies in our local data store? Why can't we deduce the life expectancy solely based on a person's country/dob/gender but instead we factor in the date of the query as well?

Honestly this was not intuitive to me either. In my first prototype I only used the /total/ life expectancy API but figured out pretty quickly that it returned different results from the /remaining/ life expectancy API.

The /total/ one needs a dob/country/gender to return a life expectancy. But if we use calculate the 'expected date of death' from the first API call, and use the expected date of death in the /remaining/ API call as our date, we don't get a life expectancy of zero. In other words, if a person's life expectancy is 80 years and the we try use the /remaining/ APi to calculate the life expectancy the date the person is 80 years old and 1 day, her life expectancy is not negative, but a positive number.

For this reason the choice was made in the data storage to include the date when the query was made.

- 'Unisex' gender appears in the error message when an invalid gender is in the request saying the API supports 'Unisex', but using 'Unisex' as the gender in a request still returns an error.

Since 'Unisex' doesn't seem to be supported in the API, I haven't included it as part of the genders that can be in LifeExpectancy.
